{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","themeMode","to","title","type","id","class","onClick","toggleThemeMode","for","toggleBtnText","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","About","myStyle","Alert","height","alert","role","word","lower","charAt","slice","capital","msg","defaultProps","App","mode","setMode","btnText","setBtnText","setAlert","message","setTimeout","colorCls","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5df51b50.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.themeMode} bg-${props.themeMode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div class={`form-check form-switch text-${props.themeMode === \"light\" ? \"dark\" : \"light\"}`}>\r\n                        <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={() => { props.toggleThemeMode(null) }} />\r\n                        <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">{props.toggleBtnText}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav >\r\n    )\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, }\r\n\r\nNavbar.defaultProps = { title: \"TextUtils\" } // This will be the default title if title is not passed as an argument\r\n","import React, { useState } from 'react' // {useState} is a hook which allows to use class features without creating a class\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\"); // When text variable is used, the default value in brackets will be used. When text is updated, it will be performed through setText function. This is array de-structuring syntax\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase(); // Converts text to uppercase\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper-case!\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase(); // Converts text to uppercase\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lower-case!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = \"\"; // Clears text\r\n        setText(newText);\r\n        props.showAlert(\"Cleared text!\", \"success\");\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied text to clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleSpaceClick = () => {\r\n        let newText = text.split(/[ ]+/); // Removes extra spaces\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed extra spaces!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value); // Adds text to default text\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.themeMode === \"dark\" ? \"white\" : \"black\" }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"10\" style={{ backgroundColor: props.themeMode === \"dark\" ? \"white\" : \"black\", color: props.themeMode === \"dark\" ? \"black\" : \"white\" }}></textarea>\r\n                </div>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopyClick}>Copy Text</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleSpaceClick}>Remove Extra Spaces</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.themeMode === \"dark\" ? \"white\" : \"black\" }}>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n                <h2>Your Text Summary</h2>\r\n                <p>{text.split(/\\s+/).filter((element) => { return element.length !== 0 })./* Earlier text utilities showed words even if there were only spaces and no actual words because we indicated to increase words when a space occurred. This issue was fixed using a filter which takes in a function and adds the element/word in the array only if it returned true. Here if an element/word is empty string, false is returned, it is not added in array and not counted as a word */length} words, {text.length} characters</p>\r\n                <p>Can be read within {0.008 * text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} minutes</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    let myStyle = {\r\n        color: props.themeMode === \"dark\" ? \"white\" : \"black\",\r\n        backgroundColor: props.themeMode === \"dark\" ? \"black\" : \"white\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"container my-2\">\r\n            <h2 style={{color: props.themeMode === \"dark\" ? \"white\" : \"black\"}}>About Us</h2>\r\n            <div class=\"accordion my-\" id=\"accordionExample\">\r\n                <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\" id=\"headingOne\">\r\n                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                            Analyse your text\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n                        <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"accordion-item\">\r\n                    <h2 class=\"accordion-header\" id=\"headingThree\">\r\n                        <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div class=\"accordion-body\" style={myStyle}> \r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capital = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height: \"50px\"}}>\r\n            {props.alert &&  // if props.alert is false, nothing will be evaluated\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capital(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react'\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {  // Alert will be dismissed after 2 seconds\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = (colorCls) => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      setBtnText(\"Enable Light Mode\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark mode has been enabled!\", \"success\");\n    }\n    else {\n      setMode(\"light\");\n      setBtnText(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled!\", \"success\");\n    }\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtilities\" themeMode={mode} toggleThemeMode={toggleMode} toggleBtnText={btnText} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About themeMode={mode} />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm heading=\"Enter Text\" themeMode={mode} showAlert={showAlert} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}